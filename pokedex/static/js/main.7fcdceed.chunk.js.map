{"version":3,"sources":["config.ts","stores/app_store.ts","storage.ts","api/api_error.ts","api/listAllPokemon.ts","api/getPokemon.ts","utils/index.ts","hooks/use_app_store.ts","components/poke_pic.tsx","components/poke_card.tsx","components/poke_grid.tsx","components/types_filter_group.tsx","components/abilities_list.tsx","components/moves_list.tsx","components/pokemon_detail.tsx","components/sort_menu.tsx","components/App.tsx","components/loading_dialog.tsx","components/bootstrapper.tsx","index.tsx","components/App.module.css","components/pokemon_detail.module.css","components/poke_pic.module.css","components/poke_card.module.css","components/poke_grid.module.css"],"names":["AppStoreState","config","appId","process","pokeapiHostName","pokedexSize","Number","storageKey","getCachedPokemon","a","localforage","getItem","setCachedPokemon","pokemon","setItem","console","error","ApiError","message","status","Error","GetPokemonError","name","url","listAllPokemon","fetch","rawResp","json","resp","getPokemon","resource","headers","getBestArtworkUrl","officialArtwork","sprites","other","front_default","parseUniqueTypes","nameSet","reduce","acc","curr","types","forEach","t","add","type","Set","Array","from","sort","map","parseUniqueSpecies","names","p","species","filter","Boolean","statsToMap","stats","stat","base","base_stat","effort","fieldAccessors","exp","base_experience","hp","find","s","height","weight","ability_count","abilities","length","order","fieldNames","key","titleCase","str","toUpperCase","split","slice","join","AppStore","searchParams","storageAdapter","storage","state","INITIAL","pokemonTypes","pokemonSpecies","query","activePokemon","this","driver","INDEXEDDB","storeName","params","validKeys","entries","val","includes","searchParamsToQuery","makeObservable","observable","loading","computed","ready","fetchAllPokemon","action","initializePokemon","total","filterByName","filterByType","filterBySpecies","queryResults","activeTypes","activeSpecies","selectPokemon","sortBy","sortField","sortedAscending","keepLocationBarInSyncWithAppState","autorun","URLSearchParams","window","history","replaceState","cachedPokemon","runInAction","FULFILLED","LOADING","results","chunks","push","splice","counter","resources","Promise","allSettled","res","fulfilled","result","value","concat","ERROR","toJS","re","RegExp","match","parseTypes","some","sortResults","coll","toString","field","currentField","currentDirection","dir","direction","fieldAccessor","sorted","b","aVal","bVal","reverse","AppStoreContext","createContext","undefined","useAppStore","context","useContext","AppStoreProvider","Provider","PokePic","className","styles","root","src","alt","PokeCard","onClick","props","Pane","padding","Strong","display","flexDirection","justifyContent","marginRight","Badge","color","PokeGrid","items","onItemClick","Paragraph","item","data-testid","id","TypesFilterGroup","observer","onChange","checked","store","handleChange","e","log","target","opt","FormField","label","Checkbox","AbilitiesList","Table","Head","TextHeaderCell","Body","Row","TextCell","ability","StatusIndicator","is_hidden","isNumber","slot","MovesList","moves","m","move","CoreAttribute","coreAttribute","coreAttributeValue","PokemonDetail","useState","selectedIndex","setSelectedIndex","borderBottom","Heading","size","Tablist","tab","index","Tab","isSelected","onSelect","aria-controls","toLowerCase","role","aria-labelledby","aria-hidden","flex","overflowY","background","Card","backgroundColor","elevation","alignItems","marginBottom","is","SortMenu","activeField","activeDirection","createHandler","fields","ActiveSortIcon","SortAscIcon","SortDescIcon","Popover","position","Position","BOTTOM_LEFT","content","Menu","Group","Item","secondaryText","Text","Button","SortIcon","App","options","speciesButtonText","showPokemon","summaryText","filterpane","aria-label","onSubmit","preventDefault","TextInputField","SelectMenu","isMultiSelect","title","selected","onDeselect","checkedTypes","contentpane","SideSheet","isShown","onCloseComplete","LoadingDialog","text","setIsShown","Dialog","hasCancel","hasFooter","shouldCloseOnOverlayClick","Spinner","Bootstrapper","children","location","search","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2UAYO,ICsBFA,EDtBQC,EAAoB,CAC/BC,MAAOC,UACPC,gBAAe,UAAED,cAAF,EAA6C,GAC5DE,YAAW,UAAEC,OAAOH,aAAT,QAAgD,IEXhDI,EAAkB,UAAMN,EAAOC,OAE/BM,EAAgB,uCAAG,sBAAAC,EAAA,+EAEfC,IAAYC,QAAQJ,GAFL,iGAIrB,MAJqB,wDAAH,qDAQhBK,EAAgB,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,+EAEtBC,IAAYI,QAAQP,EAAYM,GAFV,sDAI5BE,QAAQC,MAAM,gCAAd,MAJ4B,wDAAH,sD,wBCdhBC,EAAb,kDAEI,WAAYC,EAAiBC,GAAkB,IAAD,8BAC1C,cAAMD,IAFHC,YACuC,EAE1C,EAAKA,OAASA,EAF4B,EAFlD,sBAA8BC,QAQjBC,EAAb,kDACI,WAA4BC,EAA8BC,GAAc,IAAD,8BACnE,+CAAgCD,EAAhC,aAAyCC,EAAzC,OADwBD,OAA2C,EAAbC,MAAa,EAD3E,sBAAqCH,QCJxBI,EAAc,uCAAG,8BAAAf,EAAA,+EAIJgB,MAAM,2CAAD,OACkBxB,EAAOI,cAL1B,cAIpBqB,EAJoB,gBAOPA,EAAQC,OAPD,cAOpBC,EAPoB,yBAQnBA,GARmB,wCAUpB,IAAIX,EAAJ,kCAAgD,KAAIC,SAVhC,0DAAH,qDCDdW,EAAU,uCAAG,WAAOC,GAAP,iBAAArB,EAAA,+EAECgB,MAAMK,EAASP,IAAK,CAAEQ,QAAS,CAAE,eAAgB,sBAFlD,cAEZH,EAFY,gBAGCA,EAAKD,OAHN,cAGZA,EAHY,yBAIXA,GAJW,wCAMZ,IAAIN,EAAgBS,EAASR,KAAMQ,EAASP,KANhC,0DAAH,sD,OCyBVS,EAAoB,SAC/BnB,GACY,IAAD,IACLoB,EACJpB,EAAQqB,QAAQC,OAAStB,EAAQqB,QAAQC,MAAM,oBACjD,kCAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAiBG,qBAAxB,QAAyCvB,EAAQqB,QAAQE,qBAAzD,QAA0E,IAG/DC,EAAmB,SAACxB,GAC/B,IAAMyB,EAAUzB,EAAQ0B,QAAO,SAACC,EAAKC,GAAU,IAAD,EAE5C,OADA,UAAAA,EAAKC,aAAL,SAAYC,SAAQ,SAACC,GAAD,OAAOJ,EAAIK,IAAID,EAAEE,KAAKxB,SACnCkB,IACN,IAAIO,KACP,OAAOC,MAAMC,KAAKX,GACfY,OACAC,KAAI,SAAC7B,GAAD,MAAW,CAAEA,YAGT8B,EAAqB,SAACvC,GACjC,IAAMwC,EAAQxC,EAAQsC,KAAI,SAACG,GAAD,uBAAOA,EAAEC,eAAT,aAAO,EAAWjC,QAAMkC,OAAOC,SACnDnB,EAAU,IAAIS,IAAIM,GACxB,OAAOL,MAAMC,KAAKX,GACfY,OACAC,KAAI,SAAC7B,GAAD,MAAW,CAAEA,YAoBToC,EAAa,SAAC7C,GACzB,OAAOA,EAAQ8C,MAAMpB,QAAO,SAACC,EAAKoB,GAGhC,OADApB,EADoBoB,EAAKA,KAAKtC,MACnB,CAAEuC,KAAMD,EAAKE,UAAWC,OAAQH,EAAKG,QACzCvB,IACN,KAGQwB,EAAiC,CAC5C1C,KAAM,SAACgC,GAAD,OAAyBA,EAAEhC,MACjCwB,KAAM,SAACQ,GAAD,OAAyBA,EAAEZ,MAAM,GAAGI,KAAKxB,MAC/CiC,QAAS,SAACD,GAAD,OAAyBA,EAAEhC,MACpC2C,IAAK,SAACX,GAAD,OAAyBA,EAAEY,iBAChCC,GAAI,SAACb,GAAD,mCACFA,EAAEK,MAAMS,MAAK,SAACC,GAAD,MAAuB,OAAhBA,EAAET,KAAKtC,eADzB,aACF,EAA2CwC,iBADzC,QACsD,GAC1DQ,OAAQ,SAAChB,GAAD,OAAyBA,EAAEgB,QACnCC,OAAQ,SAACjB,GAAD,OAAyBA,EAAEiB,QACnCC,cAAe,SAAClB,GAAD,OAAyBA,EAAEmB,UAAUC,QACpDC,MAAO,SAACrB,GAAD,OAAyBA,EAAEqB,QAOvBC,EAAa,SAACC,GAAyB,IAAD,EAajD,iBAZ0C,CACxCvD,KAAM,OACNwB,KAAM,OACNS,QAAS,UACTY,GAAI,aACJF,IAAK,kBACLK,OAAQ,SACRC,OAAQ,SACRC,cAAe,gBACfG,MAAO,SAGKE,UAAd,QAAsB,WAGXC,EAAY,SAACC,GACxB,OAAOA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,IAAIC,MAAM,GAAGC,KAAK,M,SL/EvDnF,O,qBAAAA,I,qBAAAA,I,yBAAAA,I,kBAAAA,M,KAOE,IAAMoF,EAAb,WASE,WAAYC,EAAgCC,GAA8B,yBARlEC,aAQiE,OAPlEC,MAAuBxF,EAAcyF,QAO6B,KANlE5E,QAAsB,GAM4C,KALlE6E,aAA8B,GAKoC,KAJlEC,eAAmC,GAI+B,KAHlEC,MAAe,CAAEtE,KAAM,GAAIiC,QAAS,GAAIb,MAAO,GAAIQ,KAAM,aAGS,KAFlE2C,cAAiC,KAGlCP,EACFQ,KAAKP,QAAUD,GC7BnB5E,IAAYT,OAAO,CACjB8F,OAAQrF,IAAYsF,UACpB1E,KAAM,UACN2E,UAAWhG,EAAOC,QD6BhB4F,KAAKP,QAAU,CAAE/E,mBAAkBI,qBAGjCyE,IACFS,KAAKF,MKDwB,SAACM,GAClC,IAAMC,EAAY,CAAC,OAAQ,OAAQ,QAAS,WAC5C,OAAOnD,MAAMC,KAAKiD,EAAOE,WAAW7D,QAClC,SAACqD,EAAD,GAAwB,IAAD,mBAAdf,EAAc,KAATwB,EAAS,KAIrB,OAHIF,EAAUG,SAASzB,KACrBe,EAAMf,GAAOwB,GAERT,IAET,CAAEtE,KAAM,GAAIoB,MAAO,GAAIa,QAAS,GAAIL,KAAM,cLR3BqD,CAAoBlB,IAGnCmB,YAAeV,KAAM,CACnBN,MAAOiB,IACPC,QAASC,IACTC,MAAOD,IACP3F,MAAO2F,IACP9F,QAAS4F,IACTI,gBAAiBC,IACjBC,kBAAmBD,IACnBE,MAAOL,IACPM,aAAcH,IACdI,aAAcJ,IACdK,gBAAiBL,IACjBlB,MAAOa,IACPW,aAAcT,IACdU,YAAaV,IACbW,cAAeX,IACfd,cAAeY,IACfc,cAAeT,IACfU,OAAQV,IACRW,UAAWd,IACXe,gBAAiBf,MAGnBb,KAAKiB,oBACLjB,KAAK6B,oCA7CT,qEAgDE,WAA6C,IAAD,OAC1CC,aAAQ,WACN,IAAM1B,EAAS,IAAI2B,gBAAgB,EAAKjC,OACxCkC,OAAOC,QAAQC,aAAa,KAAM,GAAI,IAAM9B,QAnDlD,sEAuDE,oHAEgCJ,KAAKP,QAAQ/E,mBAF7C,OAG0B,QADhByH,EAFV,QAIMC,aAAY,WACV,EAAKrH,QAAUoH,EACf,EAAKvC,aAAerD,EAAiB4F,GACrC,EAAKtC,eAAiBvC,EAAmB6E,GACzC,EAAKzC,MAAQxF,EAAcmI,aAG7BrC,KAAKe,kBAXX,gDAcIf,KAAKe,kBAdT,yDAvDF,0HAyEE,0GACEf,KAAKN,MAAQxF,EAAcoI,QAD7B,kBAI8B5G,IAJ9B,OAOI,IAPJ,SAIY6G,EAJZ,EAIYA,QAEFC,EAAS,GACRD,EAAQ3D,QACb4D,EAAOC,KAAKF,EAAQG,OAAO,EAAG,IAG5BC,EAAUH,EAAO5D,OAXzB,yGAcYgE,EAAYJ,EAAOG,GAd/B,SAe4BE,QAAQC,WAC5BF,EAAUvF,KAAI,SAAC0F,GAAD,OAAShH,EAAWgH,OAhB1C,OAeYhI,EAfZ,OAmBMqH,aAAY,WACV,IAAMY,EAAYjI,EAAQ0B,QAAO,SAACC,EAAKuG,GAIrC,MAHsB,cAAlBA,EAAO5H,QACTqB,EAAI+F,KAAKQ,EAAOC,OAEXxG,IACN,IAEH,EAAK3B,QAAU,EAAKA,QAAQoI,OAAOH,MA3B3C,sDAaWL,IAbX,uIA+BIP,aAAY,WACV,EAAK1C,MAAQxF,EAAckJ,SAhCjC,yBAmCSpD,KAAK9E,OACRkH,aAAY,WACV,EAAKxC,aAAerD,EAAiB,EAAKxB,SAC1C,EAAK8E,eAAiBvC,EAAmB,EAAKvC,SAC9C,EAAK0E,QAAQ3E,iBAAiBuI,YAAK,EAAKtI,UACxC,EAAK2E,MAAQxF,EAAcmI,aAxCnC,6EAzEF,yEAuHE,WACE,OAAOrC,KAAKN,QAAUxF,EAAcoI,UAxHxC,iBA2HE,WACE,OAAOtC,KAAKN,QAAUxF,EAAcmI,YA5HxC,iBA+HE,WACE,OAAOrC,KAAKN,QAAUxF,EAAckJ,QAhIxC,iBAmIE,WACE,OAAOpD,KAAKjF,QAAQ6D,SApIxB,uBAuIE,WAAmB,IAAD,EAEhB,OADiB,UAAAoB,KAAKF,MAAMlD,aAAX,eAAkBgC,QAAS,EAC1BoB,KAAKF,MAAMlD,MAAMuC,MAAM,KAAO,KAzIpD,yBA4IE,WAAqB,IAAD,EAElB,OADmB,UAAAa,KAAKF,MAAMrC,eAAX,eAAoBmB,QAAS,EAC5BoB,KAAKF,MAAMrC,QAAQ0B,MAAM,KAAO,KA9IxD,wBAiJE,WACE,GAAIa,KAAKY,QAAS,MAAO,GAEzB,IAAI2B,EAAUvC,KAAKjF,QAEnB,GAAIiF,KAAKF,MAAMtE,KAAM,CACnB,IAAQA,EAASwE,KAAKF,MAAdtE,KACF8H,EAAK,IAAIC,OAAO/H,EAAM,MAC5B+G,EAAUA,EAAQ7E,QAAO,SAACF,GAAD,OAAOA,EAAEhC,KAAKgI,MAAMF,MAG/C,GAAItD,KAAKF,MAAMlD,MAAO,CACpB,IAAM2E,EAAcvB,KAAKuB,YACzBgB,EAAUA,EAAQ7E,QAAO,SAAC3C,GAExB,OKnJkB,SAACA,GACzB,OAAOA,EAAQ6B,MAAMS,KAAI,SAACP,GAAD,OAAOA,EAAEE,KAAKxB,QAAM4B,OLiJxBqG,CAAW1I,GACZ2I,MAAK,SAAC5G,GAAD,OAAOyE,EAAYf,SAAS1D,SAInD,GAAIkD,KAAKF,MAAMrC,QAAS,CACtB,IAAM+D,EAAgBxB,KAAKwB,cAC3Be,EAAUA,EAAQ7E,QAAO,SAAC3C,GACxB,OAAOyG,EAAchB,SAASzF,EAAQ0C,QAAQjC,SAIlD,OAAOwE,KAAK2D,YAAYpB,KA3K5B,qBA8KE,WACE,MAAgBvC,KAAKF,MAAM1C,KAAK+B,MAAM,KACtC,OADA,sBA/KJ,2BAmLE,WACE,IKrMoByE,ELsMpB,MAAe,SKtMKA,ELqMH5D,KAAKF,MAAM1C,KAAK+B,MAAM,MKpM7ByE,EAAKhF,OAAS,KLgB5B,0BAuLE,SAAoBpD,GAClBwE,KAAKF,MAAMtE,KAAOA,IAxLtB,0BA2LE,SAAoBoB,GAClBoD,KAAKF,MAAMlD,MAAQA,EAAMiH,aA5L7B,6BA+LE,SAAuBpG,GACrBuC,KAAKF,MAAMrC,QAAUA,EAAQoG,aAhMjC,2BAmME,SAAqB9I,GACnBiF,KAAKD,cAAgBhF,IApMzB,oBAuME,SAAc+I,GACZ,MAAyC9D,KAAKF,MAAM1C,KAAK+B,MAAM,KAA/D,mBAAO4E,EAAP,KAAqBC,EAArB,KACMC,EACJH,IAAUC,EKtJO,QLuJCC,EKvJO,OAAS,MLwJ9B,MACNhE,KAAKF,MAAM1C,KAAO,CAAC0G,EAAOG,GAAK5E,KAAK,OA7MxC,yBAgNE,SAAoBkD,GAAkC,IAAD,EAEnD,GADmBvC,KAAKF,MAAM1C,MAAQ,aACA+B,MAAM,KAA5C,mBAAO2E,EAAP,KAAcI,EAAd,KACMC,EAAa,UAAGjG,EAAe4F,UAAlB,QAA4B5F,EAAe1C,KACxD4I,EAAS7B,EAAQnD,QAAQhC,MAAK,SAACzC,EAAa0J,GAChD,IAAMC,EAAOH,EAAcxJ,GACrB4J,EAAOJ,EAAcE,GAC3B,OAAIC,EAAOC,GAAc,EACrBD,EAAOC,EAAa,EACjB,KAET,MAAqB,SAAdL,EAAuBE,EAAOI,UAAYJ,MA3NrD,KMrCaK,EAAkBC,6BAAoCC,GAMtDC,EAAc,WACvB,IAAMC,EAAUC,qBAAWL,GAC3B,IAAKI,EACD,MAAMvJ,MAAM,2DAEhB,OAAOuJ,GAGEE,EAAmBN,EAAgBO,S,iECbnCC,GAA2C,SAAC,GAAiB,IAAflK,EAAc,EAAdA,QACzD,OACE,sBACEmK,UAAWC,KAAOC,KAClBC,IAAKnJ,EAAkBnB,GACvBuK,IAAG,UAAKvK,EAAQS,KAAb,YACHoF,QAAQ,U,oBCJD2E,GAGP,SAAC,GAAoC,IAAlCxK,EAAiC,EAAjCA,QAASyK,EAAwB,EAAxBA,QAAYC,EAAY,qCAGlC5H,EAAQD,EAAW7C,GAEzB,OACE,iDAAQmK,UAAWC,KAAOC,MAAUK,GAApC,IAA2CD,QALzB,kBAAMA,EAAQzK,IAKhC,SACE,gBAAC2K,EAAA,EAAD,CAAMC,QAAS,EAAf,UACE,eAAC,GAAD,CAAS5K,QAASA,IAClB,eAAC6K,GAAA,EAAD,UAAS5G,EAAUjE,EAAQS,QAC3B,gBAACkK,EAAA,EAAD,CAAMG,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAAxD,UACE,gBAACL,EAAA,EAAD,CAAMM,YAAa,EAAnB,UACE,eAACC,GAAA,EAAD,CAAOC,MAAM,SAAb,iBADF,IACqCnL,EAAQqD,mBAE7C,gBAACsH,EAAA,EAAD,WACE,eAACO,GAAA,EAAD,CAAOC,MAAM,MAAb,gBADF,IACiCrI,EAAMQ,GAAGN,kB,oBCnBvCoI,GAGR,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACb,OACE,gBAACX,EAAA,EAAD,CAAMR,UAAWC,KAAOC,KAAxB,UACoB,IAAjBgB,EAAMxH,QAAgB,eAAC0H,EAAA,EAAD,gCACtBF,EAAM/I,KAAI,SAACkJ,GAAD,OACT,eAAC,GAAD,CACEf,QAASa,EACTtL,QAASwL,EAETC,cAAA,6BAAmCD,EAAKE,KADnCF,EAAKE,W,UCLPC,GAAoCC,aAC/C,YAA4B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACLC,EAAQlC,IAERmC,EAAqD,SAACC,GAC1D/L,QAAQgM,IAAI,SAAUD,EAAEE,OAAOhE,MAAO8D,EAAEE,OAAOL,SAC/C,IAAMjK,EAAQoK,EAAEE,OAAOL,QACnBA,EAAQ1D,OAAO6D,EAAEE,OAAOhE,OACxB2D,EAAQnJ,QAAO,SAACyJ,GAAD,OAASA,IAAQH,EAAEE,OAAOhE,SAC7C0D,EAAShK,IAGX,OACE,eAACwK,EAAA,EAAD,CAAWC,MAAM,QAAjB,SACGP,EAAMlH,aAAavC,KAAI,SAACP,GAAD,OACtB,eAACwK,GAAA,EAAD,CAEE9L,KAAK,QACL6L,MAAOvK,EAAEtB,KACToL,SAAUG,EACV7D,MAAOpG,EAAEtB,KACTqL,QAASA,EAAQrG,SAAS1D,EAAEtB,OALvBsB,EAAEtB,c,kDCxBN+L,GAAiD,SAAC,GAAiB,IAAfxM,EAAc,EAAdA,QAC/D,OACE,gBAACyM,GAAA,EAAD,WACE,gBAACA,GAAA,EAAMC,KAAP,WACE,eAACD,GAAA,EAAME,eAAP,mBACA,eAACF,GAAA,EAAME,eAAP,sBACA,eAACF,GAAA,EAAME,eAAP,sBAEF,eAACF,GAAA,EAAMG,KAAP,CAAYnJ,OAAQ,IAApB,SACGzD,EAAQ4D,UAAUtB,KAAI,SAAC1C,GAAD,OACrB,gBAAC6M,GAAA,EAAMI,IAAP,WACE,eAACJ,GAAA,EAAMK,SAAP,UAAiBlN,EAAEmN,QAAQtM,OAC3B,eAACgM,GAAA,EAAMK,SAAP,UACE,eAACE,GAAA,EAAD,CAAiB7B,MAAOvL,EAAEqN,UAAY,eAAYrD,EAAlD,SACGhK,EAAEqN,UAAY,MAAQ,SAG3B,eAACR,GAAA,EAAMK,SAAP,CAAgBI,UAAQ,EAAxB,SAA0BtN,EAAEuN,SAPdvN,EAAEmN,QAAQtM,eCVvB2M,GAA6C,SAAC,GAAiB,IACpEC,EADmE,EAAdrN,QACrCqN,MAAM/K,KAAI,SAACgL,GAAD,OAAOA,EAAEC,KAAK9M,QAAM4B,OACpD,OAAO,eAACkJ,EAAA,EAAD,UAAY8B,EAAM/I,KAAK,S,oBCG1BkJ,GAAoE,SAAC,GAGpE,IAFL/M,EAEI,EAFJA,KACA0H,EACI,EADJA,MAEA,OACE,wBAAMgC,UAAWC,KAAOqD,cAAxB,UACE,eAACvC,GAAA,EAAD,CAAOC,MAAM,UAAb,SAAwB1K,IACxB,uBAAM0J,UAAWC,KAAOsD,mBAAxB,SAA6CvF,QAKtCwF,GAAiD,SAAC,GAAiB,IAAf3N,EAAc,EAAdA,QAC/D,EAA0C4N,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACMrL,EAAIzC,EACJ8C,EAAQD,EAAWJ,GACzB,OACE,mCACE,gBAACkI,EAAA,EAAD,WACE,gBAACA,EAAA,EAAD,CAAMC,QAAS,GAAImD,aAAa,QAAhC,UACE,eAACC,EAAA,EAAD,CAASC,KAAM,IAAf,SAAqBhK,EAAUxB,EAAEhC,QACjC,gBAACkK,EAAA,EAAD,CAAMI,cAAc,MAApB,UACE,eAAC,GAAD,CAAetK,KAAK,SAAS0H,MAAO1F,EAAEgB,SACtC,eAAC,GAAD,CAAehD,KAAK,SAAS0H,MAAO1F,EAAEiB,SACtC,eAAC,GAAD,CAAejD,KAAK,MAAM0H,MAAO1F,EAAEY,kBACnC,eAAC,GAAD,CAAe5C,KAAK,KAAK0H,MAAOrF,EAAMQ,GAAGN,aAG7C,eAAC2H,EAAA,EAAD,CAAMG,QAAQ,OAAOF,QAAS,EAA9B,SACE,eAACsD,GAAA,EAAD,UACG,CAAC,SAAU,SAAS5L,KAAI,SAAC6L,EAAKC,GAAN,OACvB,eAACC,GAAA,EAAD,CAEEC,WAAYT,IAAkBO,EAC9BG,SAAU,kBAAMT,EAAiBM,IACjCI,gBAAA,gBAAwBL,EAAIM,eAJ9B,SAMGN,GALIA,UAUb,gBAACxD,EAAA,EAAD,CACEe,GAAG,eACHgD,KAAK,WACLC,kBAAiB,SACjBC,cAA+B,IAAlBf,EACb/C,QAA2B,IAAlB+C,EAAsB,QAAU,OACzCgB,KAAK,IACLC,UAAU,SACVC,WAAW,QACXnE,QAAS,GATX,UAWE,eAACoE,GAAA,EAAD,CACEC,gBAAgB,QAChBC,UAAW,EACXzL,OAAQ,IACRqH,QAAQ,OACRqE,WAAW,SACXnE,eAAe,SACfoE,aAAc,GAPhB,SASE,eAAC,GAAD,CAASpP,QAASyC,MAEpB,gBAACkI,EAAA,EAAD,CAAMkE,KAAM,EAAZ,UACE,eAACb,EAAA,EAAD,CAASqB,GAAG,KAAKD,aAAc,EAA/B,uBAGA,eAAC,GAAD,CAAepP,QAASA,UAG5B,eAAC2K,EAAA,EAAD,CACEe,GAAG,cACHgD,KAAK,WACLC,kBAAiB,QACjBC,cAA+B,IAAlBf,EACb/C,QAA2B,IAAlB+C,EAAsB,QAAU,OACzCjD,QAAS,GANX,SAQE,eAAC,GAAD,CAAW5K,QAASyC,Y,qECzEjB6M,GAIR,SAAC,GAAgD,IAA9Cf,EAA6C,EAA7CA,SAAUgB,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBACvBC,EAAgB,SAAC1G,GACrB,OAAO,kBAAMwF,EAASxF,KAGlB2G,EAAS,6DAA6DtL,MAC1E,KAGIuL,EAAqC,QAApBH,EAA4BI,KAAcC,KAEjE,OACE,eAACC,GAAA,EAAD,CACEC,SAAUC,KAASC,YACnBC,QACE,eAACC,GAAA,EAAD,UACE,eAACA,GAAA,EAAKC,MAAN,UACGV,EAAOpN,KAAI,SAACyG,GAAD,OACV,eAACoH,GAAA,EAAKE,KAAN,CAEEC,cACEf,IAAgBxG,EAAQ,eAAC4G,EAAD,SAAqB/F,EAE/C2E,SAAUkB,EAAc1G,GAL1B,SAOGwG,IAAgBxG,EACf,eAAC8B,GAAA,EAAD,UAAS9G,EAAWgF,KAEpB,eAACwH,GAAA,EAAD,UAAOxM,EAAWgF,MATfA,UAPjB,SAwBE,eAACyH,EAAA,EAAD,CAAQvF,YAAa,GAArB,SACE,eAACwF,GAAA,EAAD,SCuFOC,GAzHH9E,aAAS,WACnB,IAAMG,EAAQlC,IAqBR8G,EAAU5E,EAAMjH,eAAexC,KAAI,SAACI,GAAD,MAAc,CACrD4J,MAAO5J,EAAQjC,KACf0H,MAAOzF,EAAQjC,SAKXmQ,EACJ7E,EAAMtF,cAAc5C,OAAS,EACzBkI,EAAMtF,cAAcnC,KAAK,MACzB,YAEAuM,OAAsCjH,IAAxBmC,EAAM/G,cACpBA,EAAgB+G,EAAM/G,cAUtB8L,EAC0B,IAA9B/E,EAAMxF,aAAa1C,OACf,mBADJ,UAEOkI,EAAMxF,aAAa1C,OAF1B,eAEuCkI,EAAM/L,QAAQ6D,OAFrD,kBAIF,OACE,uCACE,uBAAKsG,UAAWC,IAAOC,KAAvB,UACE,yBAAOF,UAAWC,IAAO2G,WAAzB,UACE,eAAC/C,EAAA,EAAD,CAASqB,GAAG,KAAKpB,KAAM,IAAKmB,aAAc,GAA1C,qBAGA,wBACE1D,GAAG,cACHsF,aAAW,+CACXC,SAjCW,SAAChF,GAAD,OAAkBA,EAAEiF,kBA8BjC,UAKE,eAACC,EAAA,EAAD,CACEhJ,MAAO4D,EAAMhH,MAAMtE,KACnBoL,SA7DkB,SAACI,GAC7BF,EAAM3F,aAAa6F,EAAEE,OAAOhE,QA6DlBmE,MAAM,mBAGR,eAACD,EAAA,EAAD,CAAWC,MAAM,UAAU8C,aAAc,GAAzC,SACE,eAACgC,EAAA,EAAD,CACEC,eAAe,EACfC,MAAM,UACNX,QAASA,EACTY,SAAUxF,EAAMtF,cAChB8H,SA/Dc,SAAC/C,GAC3B,IAAM/E,EAAgBsF,EAAMtF,cAAc2B,OAAOoD,EAAKrD,MAAMW,YAC5DiD,EAAMzF,gBAAgBG,IA8DV+K,WA3DgB,SAAChG,GAC7B,IAAM+F,EAAW/F,EAAKrD,MAChB1B,EAAgBsF,EAAMtF,cAAc9D,QAAO,SAACa,GAAD,OAAOA,IAAM+N,KAC9DxF,EAAMzF,gBAAgBG,IAkDZ,SAQE,eAAC+J,EAAA,EAAD,UAASI,QAGb,eAACjF,GAAD,CACEgF,QAAS5E,EAAMlH,aACfgH,SA3Ec,SAAC4F,GACzB1F,EAAM1F,aAAaoL,IA2ET3F,QAASC,EAAMvF,oBAIrB,uBAAK2D,UAAWC,IAAOsH,YAAvB,UACE,gBAAC/G,EAAA,EAAD,CAAMG,QAAQ,OAAOC,cAAc,MAAMqE,aAAc,GAAvD,UACE,gBAACzE,EAAA,EAAD,CAAMkE,KAAM,EAAZ,UACE,eAACb,EAAA,EAAD,UAAU8C,IACV,gBAACvF,EAAA,EAAD,wBACaxH,EAAWgI,EAAMnF,WAD9B,IAC2C,IACxCmF,EAAMlF,gBACH,oBACA,0BAGR,eAAC8D,EAAA,EAAD,UACE,eAAC,GAAD,CACE4E,YAAaxD,EAAMnF,UACnB4I,gBAAiBzD,EAAMlF,gBAAkB,MAAQ,OACjD0H,SAAU,SAACxF,GAAD,OAAWgD,EAAMpF,OAAOoC,WAIxC,eAAC,GAAD,CACEsC,MAAOU,EAAMxF,aACb+E,YAvEkB,SAACE,GAC3BO,EAAMrF,cAAc8E,YA0EjBxG,GACC,eAAC2M,EAAA,EAAD,CAAWC,QAASf,EAAagB,gBAxEd,WACvB9F,EAAMrF,cAAc,OAuEhB,SACE,eAAC,GAAD,CAAe1G,QAASgF,Y,6BCrIrB8M,GAA4C,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1D,EAA8BnE,oBAAS,GAAvC,mBAAOgE,EAAP,KAAgBI,EAAhB,KAEA,OACE,gBAACC,GAAA,EAAD,CACEL,QAASA,EACTN,MAAM,kBACNO,gBAAiB,kBAAMG,GAAW,IAClCE,WAAW,EACXC,WAAW,EACXC,2BAA2B,EAN7B,UAQE,eAAC7G,EAAA,EAAD,0GAKA,gBAACZ,EAAA,EAAD,CACEG,QAAQ,OACRC,cAAc,MACdC,eAAe,SACfmE,WAAW,SAJb,UAME,eAACkD,GAAA,EAAD,CAASpE,KAAM,GAAIhD,YAAa,IAChC,eAACsF,GAAA,EAAD,UAAOwB,WCrBFO,GAAyB1G,aAAS,YAAmB,IAAhB2G,EAAe,EAAfA,SAC1CxG,EAAQlC,IAEd,OAAIkC,EAAMlG,QAEN,eAAC,GAAD,CACEkM,KAAI,UAAKhG,EAAM/L,QAAQ6D,OAAnB,eAAgCzE,EAAOI,YAAvC,cAKNuM,EAAMhG,MACD,qCAAGwM,IAGL,kCCbHxG,GAAQ,IAAIxH,EAAS,IAAIyC,gBAAgBC,OAAOuL,SAASC,SAE/DC,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC5I,EAAD,CAAkB7B,MAAO4D,GAAzB,SACE,eAACuG,GAAD,UACE,eAAC,GAAD,UAINO,SAASC,eAAe,U,mBCjB1BC,EAAOC,QAAU,CAAC,KAAO,kBAAkB,WAAa,wBAAwB,YAAc,yBAAyB,OAAS,sB,mBCAhID,EAAOC,QAAU,CAAC,cAAgB,sCAAsC,mBAAqB,6C,mBCA7FD,EAAOC,QAAU,CAAC,KAAO,yB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,2B","file":"static/js/main.7fcdceed.chunk.js","sourcesContent":["interface AppConfig {\n  appId: string;\n  pokeapiHostName: string;\n  pokedexSize: number;\n}\n\nif (process.env.REACT_APP_ID === undefined) {\n  throw Error(\n    \"No application id found. Check env variables before continuing.\"\n  );\n}\n\nexport const config: AppConfig = {\n  appId: process.env.REACT_APP_ID,\n  pokeapiHostName: process.env.REACT_APP_POKEAPI_HOST_NAME ?? \"\",\n  pokedexSize: Number(process.env.REACT_APP_POKEDEX_SIZE) ?? 10,\n};\n","import {\n  initializeStorage,\n  getCachedPokemon,\n  setCachedPokemon,\n} from \"../storage\";\nimport { getPokemon } from \"../api\";\nimport {\n  toJS,\n  action,\n  makeObservable,\n  observable,\n  computed,\n  runInAction,\n  autorun,\n} from \"mobx\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport { listAllPokemon } from \"../api/listAllPokemon\";\nimport {\n  SortDirection,\n  Query,\n  PokemonType,\n  PokemonSpecies,\n  AppStorage,\n} from \"../types\";\nimport {\n  last,\n  searchParamsToQuery,\n  parseUniqueTypes,\n  parseUniqueSpecies,\n  parseTypes,\n  fieldAccessors,\n  flipDirection,\n} from \"../utils\";\n\nenum AppStoreState {\n  INITIAL,\n  LOADING,\n  FULFILLED,\n  ERROR,\n}\n\nexport class AppStore {\n  private storage: AppStorage;\n  public state: AppStoreState = AppStoreState.INITIAL;\n  public pokemon: IPokemon[] = [];\n  public pokemonTypes: PokemonType[] = [];\n  public pokemonSpecies: PokemonSpecies[] = [];\n  public query: Query = { name: \"\", species: \"\", types: \"\", sort: \"order.asc\" };\n  public activePokemon: IPokemon | null = null;\n\n  constructor(searchParams?: URLSearchParams, storageAdapter?: AppStorage) {\n    if (storageAdapter) {\n      this.storage = storageAdapter;\n    } else {\n      initializeStorage();\n      this.storage = { getCachedPokemon, setCachedPokemon };\n    }\n\n    if (searchParams) {\n      this.query = searchParamsToQuery(searchParams);\n    }\n\n    makeObservable(this, {\n      state: observable,\n      loading: computed,\n      ready: computed,\n      error: computed,\n      pokemon: observable,\n      fetchAllPokemon: action,\n      initializePokemon: action,\n      total: computed,\n      filterByName: action,\n      filterByType: action,\n      filterBySpecies: action,\n      query: observable,\n      queryResults: computed,\n      activeTypes: computed,\n      activeSpecies: computed,\n      activePokemon: observable,\n      selectPokemon: action,\n      sortBy: action,\n      sortField: computed,\n      sortedAscending: computed,\n    });\n\n    this.initializePokemon();\n    this.keepLocationBarInSyncWithAppState();\n  }\n\n  private keepLocationBarInSyncWithAppState() {\n    autorun(() => {\n      const params = new URLSearchParams(this.query as Record<string, string>);\n      window.history.replaceState(null, \"\", \"?\" + params);\n    });\n  }\n\n  public async initializePokemon() {\n    try {\n      const cachedPokemon = await this.storage.getCachedPokemon();\n      if (cachedPokemon !== null) {\n        runInAction(() => {\n          this.pokemon = cachedPokemon;\n          this.pokemonTypes = parseUniqueTypes(cachedPokemon);\n          this.pokemonSpecies = parseUniqueSpecies(cachedPokemon);\n          this.state = AppStoreState.FULFILLED;\n        });\n      } else {\n        this.fetchAllPokemon();\n      }\n    } catch (_err) {\n      this.fetchAllPokemon();\n    }\n  }\n\n  public async fetchAllPokemon() {\n    this.state = AppStoreState.LOADING;\n\n    try {\n      const { results } = await listAllPokemon();\n\n      const chunks = [];\n      while (results.length) {\n        chunks.push(results.splice(0, 5));\n      }\n\n      let counter = chunks.length;\n\n      while (counter--) {\n        const resources = chunks[counter];\n        const pokemon = await Promise.allSettled(\n          resources.map((res) => getPokemon(res))\n        );\n\n        runInAction(() => {\n          const fulfilled = pokemon.reduce((acc, result) => {\n            if (result.status === \"fulfilled\") {\n              acc.push(result.value);\n            }\n            return acc;\n          }, [] as IPokemon[]);\n\n          this.pokemon = this.pokemon.concat(fulfilled);\n        });\n      }\n    } catch (err) {\n      runInAction(() => {\n        this.state = AppStoreState.ERROR;\n      });\n    } finally {\n      if (!this.error) {\n        runInAction(() => {\n          this.pokemonTypes = parseUniqueTypes(this.pokemon);\n          this.pokemonSpecies = parseUniqueSpecies(this.pokemon);\n          this.storage.setCachedPokemon(toJS(this.pokemon));\n          this.state = AppStoreState.FULFILLED;\n        });\n      }\n    }\n  }\n\n  get loading() {\n    return this.state === AppStoreState.LOADING;\n  }\n\n  get ready() {\n    return this.state === AppStoreState.FULFILLED;\n  }\n\n  get error() {\n    return this.state === AppStoreState.ERROR;\n  }\n\n  get total() {\n    return this.pokemon.length;\n  }\n\n  get activeTypes() {\n    const hasTypes = this.query.types?.length > 0;\n    return hasTypes ? this.query.types.split(\",\") : [];\n  }\n\n  get activeSpecies() {\n    const hasSpecies = this.query.species?.length > 0;\n    return hasSpecies ? this.query.species.split(\",\") : [];\n  }\n\n  public get queryResults(): IPokemon[] {\n    if (this.loading) return [];\n\n    let results = this.pokemon;\n\n    if (this.query.name) {\n      const { name } = this.query;\n      const re = new RegExp(name, \"gi\");\n      results = results.filter((p) => p.name.match(re));\n    }\n\n    if (this.query.types) {\n      const activeTypes = this.activeTypes;\n      results = results.filter((pokemon) => {\n        const pTypes = parseTypes(pokemon);\n        return pTypes.some((t) => activeTypes.includes(t));\n      });\n    }\n\n    if (this.query.species) {\n      const activeSpecies = this.activeSpecies;\n      results = results.filter((pokemon) => {\n        return activeSpecies.includes(pokemon.species.name);\n      });\n    }\n\n    return this.sortResults(results);\n  }\n\n  public get sortField(): string {\n    const [field] = this.query.sort.split(\".\");\n    return field;\n  }\n\n  public get sortedAscending(): boolean {\n    const dir = last(this.query.sort.split(\".\"));\n    return dir === \"asc\";\n  }\n  public filterByName(name: string) {\n    this.query.name = name;\n  }\n\n  public filterByType(types: string[]) {\n    this.query.types = types.toString();\n  }\n\n  public filterBySpecies(species: string[]) {\n    this.query.species = species.toString();\n  }\n\n  public selectPokemon(pokemon: IPokemon | null) {\n    this.activePokemon = pokemon;\n  }\n\n  public sortBy(field: string) {\n    const [currentField, currentDirection] = this.query.sort.split(\".\");\n    const dir: SortDirection =\n      field === currentField\n        ? flipDirection(currentDirection as SortDirection)\n        : \"asc\";\n    this.query.sort = [field, dir].join(\".\");\n  }\n\n  private sortResults(results: IPokemon[]): IPokemon[] {\n    const sortParams = this.query.sort || \"order.asc\";\n    const [field, direction] = sortParams.split(\".\");\n    const fieldAccessor = fieldAccessors[field] ?? fieldAccessors.name;\n    const sorted = results.slice().sort((a: IPokemon, b: IPokemon) => {\n      const aVal = fieldAccessor(a);\n      const bVal = fieldAccessor(b);\n      if (aVal < bVal) return -1;\n      if (aVal > bVal) return 1;\n      return 0;\n    });\n    return direction === \"desc\" ? sorted.reverse() : sorted;\n  }\n}\n","import localforage from \"localforage\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport { config } from \"./config\";\n\nexport const storageKey: string = `${config.appId}`;\n\nexport const getCachedPokemon = async (): Promise<IPokemon[] | null> => {\n  try {\n    return await localforage.getItem(storageKey);\n  } catch (err) {\n    return null;\n  }\n};\n\nexport const setCachedPokemon = async (pokemon: IPokemon[]): Promise<void> => {\n  try {\n    await localforage.setItem(storageKey, pokemon);\n  } catch (err) {\n    console.error(\"Error saving pokemon to cache\", err);\n  }\n};\n\nexport const initializeStorage = () => {\n  localforage.config({\n    driver: localforage.INDEXEDDB,\n    name: \"pokedex\",\n    storeName: config.appId,\n  });\n};\n","export class ApiError extends Error {\n    public status?: number;\n    constructor(message: string, status?: number) {\n        super(message);\n        this.status = status;\n    }\n}\n\nexport class GetPokemonError extends Error {\n    constructor(public readonly name: string, public readonly url: string) {\n        super(`Error fetching Pokemon ${name} (${url})`);\n    }\n}\n","import { INamedApiResourceList, IPokemon } from \"pokeapi-typescript\";\nimport { ApiError } from \"./api_error\";\nimport { config } from \"../config\";\n\nexport const listAllPokemon = async (): Promise<\n  INamedApiResourceList<IPokemon>\n> => {\n  try {\n    const rawResp = await fetch(\n      `https://pokeapi.co/api/v2/pokemon?limit=${config.pokedexSize}`\n    );\n    const resp = await rawResp.json();\n    return resp;\n  } catch (err) {\n    throw new ApiError(`Error fetching list of Pokemon.`, err.message);\n  }\n};\n","import { INamedApiResource, IPokemon } from 'pokeapi-typescript';\nimport { GetPokemonError } from './api_error';\n\nexport const getPokemon = async (resource: INamedApiResource<IPokemon>): Promise<IPokemon> => {\n    try {\n        const resp = await fetch(resource.url, { headers: { 'Content-Type': 'application/json' } });\n        const json = await resp.json();\n        return json;\n    } catch (err) {\n        throw new GetPokemonError(resource.name, resource.url);\n    }\n};\n","import { IPokemon } from \"pokeapi-typescript\";\nimport { SortDirection, Query, PokemonType, PokemonSpecies } from \"../types\";\n\ninterface PokemonOtherSprites {\n  sprites: {\n    other?: {\n      [\"official-artwork\"]: {\n        front_default?: string;\n      };\n    };\n  };\n}\n\ninterface PokemonStatsMap {\n  [name: string]: {\n    base: number;\n    effort: number;\n  };\n}\n\ninterface FieldAccessors {\n  [key: string]: (p: IPokemon) => string | number;\n}\n\nexport const last = <T>(coll: T[]): T | null => {\n  return coll[coll.length - 1];\n};\n\nexport const getBestArtworkUrl = (\n  pokemon: IPokemon & PokemonOtherSprites\n): string => {\n  const officialArtwork =\n    pokemon.sprites.other && pokemon.sprites.other[\"official-artwork\"];\n  return officialArtwork?.front_default ?? pokemon.sprites.front_default ?? \"\";\n};\n\nexport const parseUniqueTypes = (pokemon: IPokemon[]): PokemonType[] => {\n  const nameSet = pokemon.reduce((acc, curr) => {\n    curr.types?.forEach((t) => acc.add(t.type.name));\n    return acc;\n  }, new Set<string>());\n  return Array.from(nameSet)\n    .sort()\n    .map((name) => ({ name }));\n};\n\nexport const parseUniqueSpecies = (pokemon: IPokemon[]): PokemonSpecies[] => {\n  const names = pokemon.map((p) => p.species?.name).filter(Boolean);\n  const nameSet = new Set(names);\n  return Array.from(nameSet)\n    .sort()\n    .map((name) => ({ name }));\n};\n\nexport const parseTypes = (pokemon: IPokemon): string[] => {\n  return pokemon.types.map((t) => t.type.name).sort();\n};\n\nexport const searchParamsToQuery = (params: URLSearchParams): Query => {\n  const validKeys = [\"name\", \"sort\", \"types\", \"species\"];\n  return Array.from(params.entries()).reduce(\n    (query, [key, val]) => {\n      if (validKeys.includes(key)) {\n        query[key] = val;\n      }\n      return query;\n    },\n    { name: \"\", types: \"\", species: \"\", sort: \"order.asc\" } as Query\n  );\n};\n\nexport const statsToMap = (pokemon: IPokemon): PokemonStatsMap => {\n  return pokemon.stats.reduce((acc, stat) => {\n    const key: string = stat.stat.name;\n    acc[key] = { base: stat.base_stat, effort: stat.effort };\n    return acc;\n  }, {} as PokemonStatsMap);\n};\n\nexport const fieldAccessors: FieldAccessors = {\n  name: (p: IPokemon): string => p.name,\n  type: (p: IPokemon): string => p.types[0].type.name,\n  species: (p: IPokemon): string => p.name,\n  exp: (p: IPokemon): number => p.base_experience,\n  hp: (p: IPokemon): number =>\n    p.stats.find((s) => s.stat.name === \"hp\")?.base_stat ?? 0,\n  height: (p: IPokemon): number => p.height,\n  weight: (p: IPokemon): number => p.weight,\n  ability_count: (p: IPokemon): number => p.abilities.length,\n  order: (p: IPokemon): number => p.order,\n};\n\nexport const flipDirection = (direction: SortDirection): SortDirection => {\n  return direction === \"asc\" ? \"desc\" : \"asc\";\n};\n\nexport const fieldNames = (key: string): string => {\n  const fields: { [key: string]: string } = {\n    name: \"Name\",\n    type: \"Type\",\n    species: \"Species\",\n    hp: \"Hit Points\",\n    exp: \"Base Experience\",\n    height: \"Height\",\n    weight: \"Weight\",\n    ability_count: \"Ability Count\",\n    order: \"Order\",\n  };\n\n  return fields[key] ?? \"Unknown\";\n};\n\nexport const titleCase = (str: string): string => {\n  return str[0].toUpperCase() + str.split(\"\").slice(1).join(\"\");\n};\n","import { useContext } from 'react';\nimport { createContext } from 'react';\nimport { AppStore } from '../stores/app_store';\n\nexport const AppStoreContext = createContext<AppStore | undefined>(undefined);\n\nexport const useInitializeAppStore = () => {\n    return new AppStore();\n};\n\nexport const useAppStore = () => {\n    const context = useContext(AppStoreContext);\n    if (!context) {\n        throw Error('Unable to initialize app store without AppStoreProvider');\n    }\n    return context;\n};\n\nexport const AppStoreProvider = AppStoreContext.Provider;\n","import { IPokemon } from \"pokeapi-typescript\";\nimport React from \"react\";\nimport styles from \"./poke_pic.module.css\";\nimport { getBestArtworkUrl } from \"../utils\";\n\nexport const PokePic: React.FC<{ pokemon: IPokemon }> = ({ pokemon }) => {\n  return (\n    <img\n      className={styles.root}\n      src={getBestArtworkUrl(pokemon)}\n      alt={`${pokemon.name} artwork`}\n      loading=\"lazy\"\n    />\n  );\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport { Strong, Pane, Badge } from \"evergreen-ui\";\nimport { PokePic } from \"./poke_pic\";\nimport { statsToMap, titleCase } from \"../utils\";\nimport styles from \"./poke_card.module.css\";\n\nexport const PokeCard: React.FC<PropsWithChildren<{\n  pokemon: IPokemon;\n  onClick: (item: IPokemon) => void;\n}>> = ({ pokemon, onClick, ...props }) => {\n  const handleClick = () => onClick(pokemon);\n\n  const stats = statsToMap(pokemon);\n\n  return (\n    <button className={styles.root} {...props} onClick={handleClick}>\n      <Pane padding={8}>\n        <PokePic pokemon={pokemon} />\n        <Strong>{titleCase(pokemon.name)}</Strong>\n        <Pane display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\n          <Pane marginRight={8}>\n            <Badge color=\"purple\">EXP</Badge> {pokemon.base_experience}\n          </Pane>\n          <Pane>\n            <Badge color=\"red\">HP</Badge> {stats.hp.base}\n          </Pane>\n        </Pane>\n      </Pane>\n    </button>\n  );\n};\n","import { Pane, Paragraph } from \"evergreen-ui\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport React from \"react\";\nimport { PokeCard } from \"./poke_card\";\nimport styles from \"./poke_grid.module.css\";\n\nexport const PokeGrid: React.FC<{\n  items: IPokemon[];\n  onItemClick: (item: IPokemon) => void;\n}> = ({ items, onItemClick }) => {\n  return (\n    <Pane className={styles.root}>\n      {items.length === 0 && <Paragraph>No Pokemon found.</Paragraph>}\n      {items.map((item) => (\n        <PokeCard\n          onClick={onItemClick}\n          pokemon={item}\n          key={item.id}\n          data-testid={`pokedex-entry-card-${item.id}`}\n        />\n      ))}\n    </Pane>\n  );\n};\n","import { Checkbox, FormField } from \"evergreen-ui\";\nimport { observer } from \"mobx-react\";\nimport React, { ChangeEventHandler } from \"react\";\nimport { useAppStore } from \"../hooks/use_app_store\";\nimport { PokemonType } from \"../types\";\n\ninterface Props {\n  onChange: (selected: string[]) => void;\n  options: PokemonType[];\n  checked: string[];\n}\n\nexport const TypesFilterGroup: React.FC<Props> = observer(\n  ({ onChange, checked }) => {\n    const store = useAppStore();\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n      console.log(\"change\", e.target.value, e.target.checked);\n      const types = e.target.checked\n        ? checked.concat(e.target.value)\n        : checked.filter((opt) => opt !== e.target.value);\n      onChange(types);\n    };\n\n    return (\n      <FormField label=\"Types\">\n        {store.pokemonTypes.map((t) => (\n          <Checkbox\n            key={t.name}\n            name=\"types\"\n            label={t.name}\n            onChange={handleChange}\n            value={t.name}\n            checked={checked.includes(t.name)}\n          />\n        ))}\n      </FormField>\n    );\n  }\n);\n","import { Table, StatusIndicator } from \"evergreen-ui\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport React from \"react\";\n\nexport const AbilitiesList: React.FC<{ pokemon: IPokemon }> = ({ pokemon }) => {\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>Name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>Hidden?</Table.TextHeaderCell>\n        <Table.TextHeaderCell>Slot</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {pokemon.abilities.map((a) => (\n          <Table.Row key={a.ability.name}>\n            <Table.TextCell>{a.ability.name}</Table.TextCell>\n            <Table.TextCell>\n              <StatusIndicator color={a.is_hidden ? \"success\" : undefined}>\n                {a.is_hidden ? \"Yes\" : \"No\"}\n              </StatusIndicator>\n            </Table.TextCell>\n            <Table.TextCell isNumber>{a.slot}</Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n","import { Paragraph } from \"evergreen-ui\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport React from \"react\";\n\nexport const MovesList: React.FC<{ pokemon: IPokemon }> = ({ pokemon }) => {\n  const moves = pokemon.moves.map((m) => m.move.name).sort();\n  return <Paragraph>{moves.join(\", \")}</Paragraph>;\n};\n","import { Badge, Tablist, Tab, Card, Pane, Heading } from \"evergreen-ui\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport React, { useState } from \"react\";\nimport { statsToMap, titleCase } from \"../utils\";\nimport { AbilitiesList } from \"./abilities_list\";\nimport { MovesList } from \"./moves_list\";\nimport { PokePic } from \"./poke_pic\";\nimport styles from \"./pokemon_detail.module.css\";\n\nconst CoreAttribute: React.FC<{ name: string; value: string | number }> = ({\n  name,\n  value,\n}) => {\n  return (\n    <span className={styles.coreAttribute}>\n      <Badge color=\"neutral\">{name}</Badge>\n      <span className={styles.coreAttributeValue}>{value}</span>\n    </span>\n  );\n};\n\nexport const PokemonDetail: React.FC<{ pokemon: IPokemon }> = ({ pokemon }) => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const p = pokemon;\n  const stats = statsToMap(p);\n  return (\n    <article>\n      <Pane>\n        <Pane padding={16} borderBottom=\"muted\">\n          <Heading size={800}>{titleCase(p.name)}</Heading>\n          <Pane flexDirection=\"row\">\n            <CoreAttribute name=\"Height\" value={p.height} />\n            <CoreAttribute name=\"Weight\" value={p.weight} />\n            <CoreAttribute name=\"Exp\" value={p.base_experience} />\n            <CoreAttribute name=\"HP\" value={stats.hp.base} />\n          </Pane>\n        </Pane>\n        <Pane display=\"flex\" padding={8}>\n          <Tablist>\n            {[\"Traits\", \"Moves\"].map((tab, index) => (\n              <Tab\n                key={tab}\n                isSelected={selectedIndex === index}\n                onSelect={() => setSelectedIndex(index)}\n                aria-controls={`panel-${tab.toLowerCase()}`}\n              >\n                {tab}\n              </Tab>\n            ))}\n          </Tablist>\n        </Pane>\n        <Pane\n          id=\"panel-traits\"\n          role=\"tabpanel\"\n          aria-labelledby={\"Traits\"}\n          aria-hidden={selectedIndex !== 0}\n          display={selectedIndex === 0 ? \"block\" : \"none\"}\n          flex=\"1\"\n          overflowY=\"scroll\"\n          background=\"tint1\"\n          padding={16}\n        >\n          <Card\n            backgroundColor=\"white\"\n            elevation={0}\n            height={240}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            marginBottom={16}\n          >\n            <PokePic pokemon={p} />\n          </Card>\n          <Pane flex={1}>\n            <Heading is=\"h3\" marginBottom={8}>\n              Abilities\n            </Heading>\n            <AbilitiesList pokemon={pokemon} />\n          </Pane>\n        </Pane>\n        <Pane\n          id=\"panel-moves\"\n          role=\"tabpanel\"\n          aria-labelledby={\"Moves\"}\n          aria-hidden={selectedIndex !== 1}\n          display={selectedIndex === 1 ? \"block\" : \"none\"}\n          padding={16}\n        >\n          <MovesList pokemon={p} />\n        </Pane>\n      </Pane>\n    </article>\n  );\n};\n","import React from \"react\";\nimport {\n  Strong,\n  Text,\n  Button,\n  Menu,\n  Popover,\n  SortIcon,\n  Position,\n  SortAscIcon,\n  SortDescIcon,\n} from \"evergreen-ui\";\nimport { SortDirection } from \"../types\";\nimport { fieldNames } from \"../utils\";\n\nexport const SortMenu: React.FC<{\n  onSelect: (field: string) => void;\n  activeField: string;\n  activeDirection: SortDirection;\n}> = ({ onSelect, activeField, activeDirection }) => {\n  const createHandler = (field: string) => {\n    return () => onSelect(field);\n  };\n\n  const fields = \"order name type species hp exp ability_count height weight\".split(\n    \" \"\n  );\n\n  const ActiveSortIcon = activeDirection === \"asc\" ? SortAscIcon : SortDescIcon;\n\n  return (\n    <Popover\n      position={Position.BOTTOM_LEFT}\n      content={\n        <Menu>\n          <Menu.Group>\n            {fields.map((field) => (\n              <Menu.Item\n                key={field}\n                secondaryText={\n                  activeField === field ? <ActiveSortIcon /> : undefined\n                }\n                onSelect={createHandler(field)}\n              >\n                {activeField === field ? (\n                  <Strong>{fieldNames(field)}</Strong>\n                ) : (\n                  <Text>{fieldNames(field)}</Text>\n                )}\n              </Menu.Item>\n            ))}\n          </Menu.Group>\n        </Menu>\n      }\n    >\n      <Button marginRight={16}>\n        <SortIcon />\n      </Button>\n    </Popover>\n  );\n};\n","import React, { ChangeEvent, FormEvent } from \"react\";\nimport { observer } from \"mobx-react\";\nimport styles from \"./App.module.css\";\nimport {\n  Button,\n  Heading,\n  FormField,\n  SelectMenu,\n  SelectMenuItem,\n  TextInputField,\n  SideSheet,\n  Pane,\n  Paragraph,\n} from \"evergreen-ui\";\nimport { useAppStore } from \"../hooks/use_app_store\";\nimport { PokeGrid } from \"./poke_grid\";\nimport { TypesFilterGroup } from \"./types_filter_group\";\nimport { IPokemon } from \"pokeapi-typescript\";\nimport { PokemonDetail } from \"./pokemon_detail\";\nimport { SortMenu } from \"./sort_menu\";\nimport { fieldNames } from \"../utils\";\n\nconst App = observer(() => {\n  const store = useAppStore();\n\n  const handleNameInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    store.filterByName(e.target.value);\n  };\n\n  const handleTypesChange = (checkedTypes: string[]) => {\n    store.filterByType(checkedTypes);\n  };\n\n  const handleSpeciesSelect = (item: SelectMenuItem) => {\n    const activeSpecies = store.activeSpecies.concat(item.value.toString());\n    store.filterBySpecies(activeSpecies);\n  };\n\n  const handleSpeciesDeselect = (item: SelectMenuItem) => {\n    const selected = item.value;\n    const activeSpecies = store.activeSpecies.filter((s) => s !== selected);\n    store.filterBySpecies(activeSpecies);\n  };\n\n  const options = store.pokemonSpecies.map((species) => ({\n    label: species.name,\n    value: species.name,\n  }));\n\n  const cancelSubmit = (e: FormEvent) => e.preventDefault();\n\n  const speciesButtonText =\n    store.activeSpecies.length > 0\n      ? store.activeSpecies.join(\", \")\n      : \"Select...\";\n\n  const showPokemon = store.activePokemon !== undefined;\n  const activePokemon = store.activePokemon;\n\n  const handleGridItemClick = (item: IPokemon) => {\n    store.selectPokemon(item);\n  };\n\n  const handleSheetClose = () => {\n    store.selectPokemon(null);\n  };\n\n  const summaryText =\n    store.queryResults.length === 0\n      ? \"No Pokemon found\"\n      : `${store.queryResults.length} of ${store.pokemon.length} Pokemon shown`;\n\n  return (\n    <>\n      <div className={styles.root}>\n        <aside className={styles.filterpane}>\n          <Heading is=\"h1\" size={900} marginBottom={16}>\n            Pokedex\n          </Heading>\n          <form\n            id=\"filter-form\"\n            aria-label=\"Filter the Pokedex by name, type, or species\"\n            onSubmit={cancelSubmit}\n          >\n            <TextInputField\n              value={store.query.name}\n              onChange={handleNameInputChange}\n              label=\"Character name\"\n            />\n\n            <FormField label=\"Species\" marginBottom={16}>\n              <SelectMenu\n                isMultiSelect={true}\n                title=\"Species\"\n                options={options}\n                selected={store.activeSpecies}\n                onSelect={handleSpeciesSelect}\n                onDeselect={handleSpeciesDeselect}\n              >\n                <Button>{speciesButtonText}</Button>\n              </SelectMenu>\n            </FormField>\n            <TypesFilterGroup\n              options={store.pokemonTypes}\n              onChange={handleTypesChange}\n              checked={store.activeTypes}\n            />\n          </form>\n        </aside>\n        <div className={styles.contentpane}>\n          <Pane display=\"flex\" flexDirection=\"row\" marginBottom={16}>\n            <Pane flex={1}>\n              <Heading>{summaryText}</Heading>\n              <Paragraph>\n                Sorted by {fieldNames(store.sortField)},{\" \"}\n                {store.sortedAscending\n                  ? \"lowest to highest\"\n                  : \"highest to lowest\"}\n              </Paragraph>\n            </Pane>\n            <Pane>\n              <SortMenu\n                activeField={store.sortField}\n                activeDirection={store.sortedAscending ? \"asc\" : \"desc\"}\n                onSelect={(field) => store.sortBy(field)}\n              />\n            </Pane>\n          </Pane>\n          <PokeGrid\n            items={store.queryResults}\n            onItemClick={handleGridItemClick}\n          />\n        </div>\n      </div>\n      {activePokemon && (\n        <SideSheet isShown={showPokemon} onCloseComplete={handleSheetClose}>\n          <PokemonDetail pokemon={activePokemon} />\n        </SideSheet>\n      )}\n    </>\n  );\n});\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { Spinner, Dialog, Paragraph, Text, Pane } from \"evergreen-ui\";\n\nexport const LoadingDialog: React.FC<{ text: string }> = ({ text }) => {\n  const [isShown, setIsShown] = useState(true);\n\n  return (\n    <Dialog\n      isShown={isShown}\n      title=\"Loading Pokemon\"\n      onCloseComplete={() => setIsShown(false)}\n      hasCancel={false}\n      hasFooter={false}\n      shouldCloseOnOverlayClick={false}\n    >\n      <Paragraph>\n        This only happens this one time, and then you'll have all your Pokemon\n        saved for quick use.\n      </Paragraph>\n\n      <Pane\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Spinner size={16} marginRight={8} />\n        <Text>{text}</Text>\n      </Pane>\n    </Dialog>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useAppStore } from \"../hooks/use_app_store\";\nimport { LoadingDialog } from \"./loading_dialog\";\nimport { config } from \"../config\";\n\nexport const Bootstrapper: React.FC = observer(({ children }) => {\n  const store = useAppStore();\n\n  if (store.loading) {\n    return (\n      <LoadingDialog\n        text={`${store.pokemon.length} of ${config.pokedexSize} loaded.`}\n      />\n    );\n  }\n\n  if (store.ready) {\n    return <>{children}</>;\n  }\n\n  return <></>;\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { AppStoreProvider } from \"./hooks/use_app_store\";\nimport { AppStore } from \"./stores/app_store\";\nimport \"./index.css\";\nimport { Bootstrapper } from \"./components/bootstrapper\";\n\nconst store = new AppStore(new URLSearchParams(window.location.search));\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStoreProvider value={store}>\n      <Bootstrapper>\n        <App />\n      </Bootstrapper>\n    </AppStoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__1Ylx4\",\"filterpane\":\"App_filterpane__1KMqB\",\"contentpane\":\"App_contentpane__jBJTJ\",\"header\":\"App_header__14Wxn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"coreAttribute\":\"pokemon_detail_coreAttribute__2FahW\",\"coreAttributeValue\":\"pokemon_detail_coreAttributeValue__x4Hpr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"poke_pic_root__1YtHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"poke_card_root__3jm3I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"poke_grid_root__3AETM\"};"],"sourceRoot":""}